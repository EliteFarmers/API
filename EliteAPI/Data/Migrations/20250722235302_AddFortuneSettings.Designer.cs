// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using EliteAPI.Data;
using EliteAPI.Features.Account.DTOs;
using EliteAPI.Features.Account.Models;
using EliteAPI.Features.Leaderboards.Models;
using EliteAPI.Models.Entities.Discord;
using EliteAPI.Models.Entities.Events;
using EliteAPI.Models.Entities.Farming;
using EliteAPI.Models.Entities.Hypixel;
using EliteAPI.Models.Entities.Monetization;
using HypixelAPI.DTOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EliteAPI.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250722235302_AddFortuneSettings")]
    partial class AddFortuneSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EliteAPI.Features.Account.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ImageId")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("TieToAccount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.EliteAccount", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("ActiveRewards")
                        .HasColumnType("boolean");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<int?>("UserSettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.MinecraftAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<byte[]>("Face")
                        .HasColumnType("bytea");

                    b.Property<List<FlagReason>>("FlagReasons")
                        .HasColumnType("jsonb");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Hat")
                        .HasColumnType("bytea");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<long>("PlayerDataLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfilesLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.Property<string>("TextureId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "Name" }, "idx_minecraft_accounts_name");

                    b.ToTable("MinecraftAccounts");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("integer");

                    b.Property<string>("MinecraftAccountId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("MinecraftAccountId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<MemberLeaderboardCosmeticsDto>("CustomLeaderboardStyle")
                        .HasColumnType("jsonb");

                    b.Property<string>("EmojiUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<ConfiguredProductFeatures>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<FortuneSettingsDto>("Fortune")
                        .HasColumnType("jsonb");

                    b.Property<int?>("LeaderboardStyleId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameStyleId")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int?>("WeightStyleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardStyleId");

                    b.HasIndex("NameStyleId");

                    b.HasIndex("WeightStyleId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("EliteAPI.Features.Announcements.Models.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("TargetEndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TargetLabel")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TargetStartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TargetUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("EliteAPI.Features.Announcements.Models.DismissedAnnouncement", b =>
                {
                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AccountId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("AnnouncementId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("DismissedAnnouncements");
                });

            modelBuilder.Entity("EliteAPI.Features.Auth.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DiscordAccessToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("DiscordAccessTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordRefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("DiscordRefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("GuildsLastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EliteAPI.Features.Auth.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeaderboardId"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IconId")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("MinimumScore")
                        .HasColumnType("numeric");

                    b.Property<string>("Property")
                        .HasColumnType("text");

                    b.Property<string>("ScoreDataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("LeaderboardId");

                    b.HasIndex("IconId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardEntry", b =>
                {
                    b.Property<int>("LeaderboardEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeaderboardEntryId"));

                    b.Property<decimal>("InitialScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(24, 4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("IntervalIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("LeaderboardId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(24, 4)");

                    b.HasKey("LeaderboardEntryId");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileMemberId");

                    b.HasIndex("LeaderboardId", "IntervalIdentifier", "Score")
                        .IsDescending(false, false, true);

                    b.HasIndex("ProfileType", "LeaderboardId", "IntervalIdentifier");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardSnapshot", b =>
                {
                    b.Property<int>("LeaderboardSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeaderboardSnapshotId"));

                    b.Property<string>("IntervalIdentifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LeaderboardId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SnapshotTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaderboardSnapshotId");

                    b.HasIndex("LeaderboardId", "IntervalIdentifier");

                    b.HasIndex(new[] { "LeaderboardId", "SnapshotTimestamp", "IntervalIdentifier" }, "IX_LeaderboardSnapshots_Definition_Timestamp_Interval")
                        .IsUnique();

                    b.ToTable("LeaderboardSnapshots");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardSnapshotEntry", b =>
                {
                    b.Property<int>("LeaderboardSnapshotEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeaderboardSnapshotEntryId"));

                    b.Property<DateTimeOffset>("EntryTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InitialScore")
                        .HasColumnType("numeric");

                    b.Property<string>("IntervalIdentifier")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("LeaderboardSnapshotId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(24, 4)");

                    b.HasKey("LeaderboardSnapshotEntryId");

                    b.HasIndex("LeaderboardSnapshotId", "Score");

                    b.HasIndex("ProfileType", "LeaderboardSnapshotId");

                    b.ToTable("LeaderboardSnapshotEntries", null, t =>
                        {
                            t.HasCheckConstraint("CK_LeaderboardSnapshotEntries_ProfileOrMember", "((\"ProfileId\" IS NOT NULL AND \"ProfileMemberId\" IS NULL) OR (\"ProfileId\" IS NULL AND \"ProfileMemberId\" IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.ProfileMemberMetadata", b =>
                {
                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkyblockExperience")
                        .HasColumnType("integer");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileMemberId");

                    b.ToTable("ProfileMemberMetadata");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.Entitlement", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool?>("Consumed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)")
                        .HasAnnotation("Relational:JsonPropertyName", "sku_id");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Entitlements");

                    b.HasDiscriminator<int>("Target").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ProductAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Consumed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SourceOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductAccesses");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ShopOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BuyerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderTransactionId")
                        .HasColumnType("text");

                    b.Property<decimal?>("RecipientGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("RecipientId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("RecipientGuildId");

                    b.HasIndex("RecipientId");

                    b.ToTable("ShopOrders");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ShopOrderItem", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShopOrderItems");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Auctions.Models.AuctionBinPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AuctionUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("IngestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ListedAt")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SkyblockId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VariantKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuctionUuid");

                    b.HasIndex("IngestedAt");

                    b.HasIndex("SkyblockId", "VariantKey", "ListedAt");

                    b.ToTable("AuctionBinPrices");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Auctions.Models.AuctionItem", b =>
                {
                    b.Property<string>("SkyblockId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("VariantKey")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CalculatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Lowest")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Lowest3Day")
                        .HasColumnType("numeric");

                    b.Property<int>("Lowest3DayVolume")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Lowest7Day")
                        .HasColumnType("numeric");

                    b.Property<int>("Lowest7DayVolume")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LowestObservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LowestVolume")
                        .HasColumnType("integer");

                    b.HasKey("SkyblockId", "VariantKey");

                    b.HasIndex("CalculatedAt");

                    b.ToTable("AuctionItems");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Bazaar.BazaarProductSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BuyOrderPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("InstaBuyPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("InstaSellPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SellOrderPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecordedAt");

                    b.HasIndex("ProductId", "RecordedAt")
                        .IsUnique();

                    b.ToTable("BazaarProductSnapshots");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Bazaar.BazaarProductSummary", b =>
                {
                    b.Property<string>("ItemId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("AvgBuyOrderPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("AvgInstaBuyPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("AvgInstaSellPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("AvgSellOrderPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("BuyOrderPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CalculationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("InstaBuyPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("InstaSellPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("SellOrderPrice")
                        .HasColumnType("double precision");

                    b.HasKey("ItemId");

                    b.HasIndex("CalculationTimestamp");

                    b.ToTable("BazaarProductSummaries");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Items.Models.SkyblockItem", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<ItemResponse>("Data")
                        .HasColumnType("jsonb");

                    b.Property<double>("NpcSellPrice")
                        .HasColumnType("double precision");

                    b.HasKey("ItemId");

                    b.ToTable("SkyblockItems");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.Guild", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("ActiveRewards")
                        .HasColumnType("boolean");

                    b.Property<decimal>("AdminRole")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("BannerId")
                        .HasColumnType("character varying(48)");

                    b.Property<decimal>("BotPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<List<string>>("DiscordFeatures")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<GuildFeatures>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("HasBot")
                        .HasColumnType("boolean");

                    b.Property<string>("IconId")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("IconId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("BotPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildChannels");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Permissions")
                        .HasColumnType("numeric(20,0)");

                    b.PrimitiveCollection<decimal[]>("Roles")
                        .IsRequired()
                        .HasColumnType("numeric(20,0)[]");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<decimal>("Permissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildRoles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.Event", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("BannerId")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<string>("BlockedRole")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("DynamicStartTime")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("JoinUntilTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxTeamMembers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PrizeInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("RequiredRole")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Rules")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("GuildId");

                    b.ToTable("Events");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EstimatedTimeActive")
                        .HasColumnType("bigint");

                    b.Property<decimal>("EventId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("EventMembers");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<decimal>("EventId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("EventTeams");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Farming.Farming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Dictionary<string, double>>("BonusWeight")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, double>>("CropWeight")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<FarmingFortune>("Fortune")
                        .HasColumnType("jsonb");

                    b.Property<FarmingInventory>("Inventory")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("double precision");

                    b.Property<Dictionary<Crop, long>>("UncountedCrops")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("FarmingWeights");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Chocolate")
                        .HasColumnType("bigint");

                    b.Property<long>("ChocolateSincePrestige")
                        .HasColumnType("bigint");

                    b.Property<long>("ChocolateSpent")
                        .HasColumnType("bigint");

                    b.Property<int>("CocoaFortuneUpgrades")
                        .HasColumnType("integer");

                    b.Property<long>("LastViewedChocolateFactory")
                        .HasColumnType("bigint");

                    b.Property<int>("Prestige")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("RefinedTrufflesConsumed")
                        .HasColumnType("integer");

                    b.Property<long>("TotalChocolate")
                        .HasColumnType("bigint");

                    b.Property<bool>("UnlockedZorro")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("ChocolateFactories");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ContestParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Collected")
                        .HasColumnType("integer");

                    b.Property<long>("JacobContestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("JacobDataId")
                        .HasColumnType("integer");

                    b.Property<int>("MedalEarned")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JacobContestId");

                    b.HasIndex("JacobDataId");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("ContestParticipations");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Garden", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("CompletedVisitors")
                        .HasColumnType("integer");

                    b.Property<ComposterData>("Composter")
                        .HasColumnType("jsonb");

                    b.Property<long>("GardenExperience")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UniqueVisitors")
                        .HasColumnType("integer");

                    b.Property<long>("UnlockedPlots")
                        .HasColumnType("bigint");

                    b.Property<Dictionary<string, VisitorData>>("Visitors")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("ProfileId");

                    b.ToTable("Gardens");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobContest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Bronze")
                        .HasColumnType("integer");

                    b.Property<int>("Crop")
                        .HasColumnType("integer");

                    b.Property<int>("Diamond")
                        .HasColumnType("integer");

                    b.Property<bool>("Finnegan")
                        .HasColumnType("boolean");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int>("Participants")
                        .HasColumnType("integer");

                    b.Property<int>("Platinum")
                        .HasColumnType("integer");

                    b.Property<int>("Silver")
                        .HasColumnType("integer");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("JacobContests");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ContestsLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<int>("FirstPlaceScores")
                        .HasColumnType("integer");

                    b.Property<int>("Participations")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<JacobStats>("Stats")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("JacobData");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<long>("FirstLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("Karma")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogout")
                        .HasColumnType("bigint");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("MonthlyPackageRank")
                        .HasColumnType("text");

                    b.Property<string>("MonthlyRankColor")
                        .HasColumnType("text");

                    b.Property<string>("MostRecentMonthlyPackageRank")
                        .HasColumnType("text");

                    b.Property<double>("NetworkExp")
                        .HasColumnType("double precision");

                    b.Property<string>("NewPackageRank")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.Property<string>("RankPlusColor")
                        .HasColumnType("text");

                    b.Property<int>("RewardHighScore")
                        .HasColumnType("integer");

                    b.Property<int>("RewardScore")
                        .HasColumnType("integer");

                    b.Property<int>("RewardStreak")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDailyRewards")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRewards")
                        .HasColumnType("integer");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("PlayerData");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Profile", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<double>("BankBalance")
                        .HasColumnType("double precision");

                    b.Property<Dictionary<string, int>>("CraftedMinions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("GameMode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, int>>("CollectionTiers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("Collections")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<List<Pet>>("Pets")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PlayerUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileName")
                        .HasColumnType("text");

                    b.Property<double>("Purse")
                        .HasColumnType("double precision");

                    b.Property<int>("SkyblockXp")
                        .HasColumnType("integer");

                    b.Property<UnparsedApiData>("Unparsed")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("WasRemoved")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerUuid");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMembers");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Alchemy")
                        .HasColumnType("double precision");

                    b.Property<double>("Carpentry")
                        .HasColumnType("double precision");

                    b.Property<double>("Combat")
                        .HasColumnType("double precision");

                    b.Property<double>("Enchanting")
                        .HasColumnType("double precision");

                    b.Property<double>("Farming")
                        .HasColumnType("double precision");

                    b.Property<double>("Fishing")
                        .HasColumnType("double precision");

                    b.Property<double>("Foraging")
                        .HasColumnType("double precision");

                    b.Property<double>("Mining")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Runecrafting")
                        .HasColumnType("double precision");

                    b.Property<double>("Social")
                        .HasColumnType("double precision");

                    b.Property<double>("Taming")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Images.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Path");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.CosmeticImage", b =>
                {
                    b.Property<int>("CosmeticId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageId")
                        .HasColumnType("character varying(48)");

                    b.HasKey("CosmeticId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("CosmeticImage");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Product", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<UnlockedProductFeatures>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Flags")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ThumbnailId")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductCategory", b =>
                {
                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Order");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductImage", b =>
                {
                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ImageId")
                        .HasColumnType("character varying(48)");

                    b.HasKey("ProductId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductTag", b =>
                {
                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("Order");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductWeightStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ProductId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("WeightStyleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WeightStyleId");

                    b.ToTable("ProductCosmetics");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.WeightStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Collection")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<WeightStyleData>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ImageId")
                        .HasColumnType("character varying(48)");

                    b.Property<LeaderboardStyleData>("Leaderboard")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<NameStyleData>("NameStyle")
                        .HasColumnType("jsonb");

                    b.Property<string>("StyleFormatter")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("Type");

                    b.ToTable("Cosmetics");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.CropCollection", b =>
                {
                    b.Property<int>("Beetle")
                        .HasColumnType("integer");

                    b.Property<long>("Cactus")
                        .HasColumnType("bigint");

                    b.Property<long>("Carrot")
                        .HasColumnType("bigint");

                    b.Property<long>("CocoaBeans")
                        .HasColumnType("bigint");

                    b.Property<int>("Cricket")
                        .HasColumnType("integer");

                    b.Property<int>("Earthworm")
                        .HasColumnType("integer");

                    b.Property<int>("Fly")
                        .HasColumnType("integer");

                    b.Property<int>("Locust")
                        .HasColumnType("integer");

                    b.Property<long>("Melon")
                        .HasColumnType("bigint");

                    b.Property<int>("Mite")
                        .HasColumnType("integer");

                    b.Property<int>("Mosquito")
                        .HasColumnType("integer");

                    b.Property<int>("Moth")
                        .HasColumnType("integer");

                    b.Property<int>("Mouse")
                        .HasColumnType("integer");

                    b.Property<long>("Mushroom")
                        .HasColumnType("bigint");

                    b.Property<long>("NetherWart")
                        .HasColumnType("bigint");

                    b.Property<long>("Potato")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<long>("Pumpkin")
                        .HasColumnType("bigint");

                    b.Property<int>("Rat")
                        .HasColumnType("integer");

                    b.Property<long>("Seeds")
                        .HasColumnType("bigint");

                    b.Property<int>("Slug")
                        .HasColumnType("integer");

                    b.Property<long>("SugarCane")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Wheat")
                        .HasColumnType("bigint");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("CropCollections");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.SkillExperience", b =>
                {
                    b.Property<double>("Alchemy")
                        .HasColumnType("double precision");

                    b.Property<double>("Carpentry")
                        .HasColumnType("double precision");

                    b.Property<double>("Combat")
                        .HasColumnType("double precision");

                    b.Property<double>("Enchanting")
                        .HasColumnType("double precision");

                    b.Property<double>("Farming")
                        .HasColumnType("double precision");

                    b.Property<double>("Fishing")
                        .HasColumnType("double precision");

                    b.Property<double>("Foraging")
                        .HasColumnType("double precision");

                    b.Property<double>("Mining")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Runecrafting")
                        .HasColumnType("double precision");

                    b.Property<double>("Social")
                        .HasColumnType("double precision");

                    b.Property<double>("Taming")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("SkillExperiences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8270a1b1-5809-436a-ba1c-b712f4f55f67",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3384aba1-5453-4787-81d9-0b7222225d81",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "d8c803c1-63a0-4594-8d68-aad7bd59df7d",
                            Name = "Support",
                            NormalizedName = "SUPPORT"
                        },
                        new
                        {
                            Id = "ff4f5319-644e-4332-8bd5-2ec989ba5e7f",
                            Name = "Wiki",
                            NormalizedName = "WIKI"
                        },
                        new
                        {
                            Id = "e99efab5-3fd2-416e-b8f5-93b0370892ac",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.GuildEntitlement", b =>
                {
                    b.HasBaseType("EliteAPI.Features.Monetization.Models.Entitlement");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.HasIndex("GuildId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.UserEntitlement", b =>
                {
                    b.HasBaseType("EliteAPI.Features.Monetization.Models.Entitlement");

                    b.Property<decimal>("AccountId")
                        .HasMaxLength(22)
                        .HasColumnType("numeric(20,0)");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.CollectionEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<CollectionEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.MedalEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<MedalEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.PestEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<PestEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.WeightEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<WeightEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.CollectionEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<CollectionEventMemberData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.MedalEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<MedalEventMemberData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.PestEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<PestEventMemberData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.WeightEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<EventMemberWeightData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.Badge", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.EliteAccount", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.MinecraftAccount", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "EliteAccount")
                        .WithMany("MinecraftAccounts")
                        .HasForeignKey("AccountId");

                    b.Navigation("EliteAccount");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.UserBadge", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Features.Account.Models.MinecraftAccount", "MinecraftAccount")
                        .WithMany("Badges")
                        .HasForeignKey("MinecraftAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("MinecraftAccount");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.UserSettings", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.WeightStyle", "LeaderboardStyle")
                        .WithMany()
                        .HasForeignKey("LeaderboardStyleId");

                    b.HasOne("EliteAPI.Models.Entities.Monetization.WeightStyle", "NameStyle")
                        .WithMany()
                        .HasForeignKey("NameStyleId");

                    b.HasOne("EliteAPI.Models.Entities.Monetization.WeightStyle", "WeightStyle")
                        .WithMany()
                        .HasForeignKey("WeightStyleId");

                    b.Navigation("LeaderboardStyle");

                    b.Navigation("NameStyle");

                    b.Navigation("WeightStyle");
                });

            modelBuilder.Entity("EliteAPI.Features.Announcements.Models.DismissedAnnouncement", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "EliteAccount")
                        .WithMany("DismissedAnnouncements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Features.Announcements.Models.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("EliteAccount");
                });

            modelBuilder.Entity("EliteAPI.Features.Auth.Models.ApiUser", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EliteAPI.Features.Auth.Models.RefreshToken", b =>
                {
                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.Leaderboard", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("EliteAPI.Features.Leaderboards.Models.Leaderboard", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId");

                    b.Navigation("Leaderboard");

                    b.Navigation("Profile");

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardSnapshot", b =>
                {
                    b.HasOne("EliteAPI.Features.Leaderboards.Models.Leaderboard", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.LeaderboardSnapshotEntry", b =>
                {
                    b.HasOne("EliteAPI.Features.Leaderboards.Models.LeaderboardSnapshot", "LeaderboardSnapshot")
                        .WithMany()
                        .HasForeignKey("LeaderboardSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderboardSnapshot");
                });

            modelBuilder.Entity("EliteAPI.Features.Leaderboards.Models.ProfileMemberMetadata", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("Metadata")
                        .HasForeignKey("EliteAPI.Features.Leaderboards.Models.ProfileMemberMetadata", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Features.Leaderboards.Models.ProfileMemberMetadataCosmetics", "Cosmetics", b1 =>
                        {
                            b1.Property<Guid>("ProfileMemberMetadataProfileMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Prefix")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.Property<string>("Suffix")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.HasKey("ProfileMemberMetadataProfileMemberId");

                            b1.ToTable("ProfileMemberMetadata");

                            b1.ToJson("Cosmetics");

                            b1.WithOwner()
                                .HasForeignKey("ProfileMemberMetadataProfileMemberId");

                            b1.OwnsOne("EliteAPI.Features.Leaderboards.Models.MemberLeaderboardCosmeticsDto", "Leaderboard", b2 =>
                                {
                                    b2.Property<Guid>("ProfileMemberMetadataCosmeticsProfileMemberMetadataProfileMemberId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("ProfileMemberMetadataCosmeticsProfileMemberMetadataProfileMemb~");

                                    b2.Property<string>("BackgroundColor")
                                        .HasColumnType("text");

                                    b2.Property<string>("BackgroundImage")
                                        .HasColumnType("text");

                                    b2.Property<string>("BorderColor")
                                        .HasColumnType("text");

                                    b2.Property<string>("OverlayImage")
                                        .HasColumnType("text");

                                    b2.Property<string>("RankColor")
                                        .HasColumnType("text");

                                    b2.Property<int?>("StyleId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("TextColor")
                                        .HasColumnType("text");

                                    b2.HasKey("ProfileMemberMetadataCosmeticsProfileMemberMetadataProfileMemberId");

                                    b2.ToTable("ProfileMemberMetadata");

                                    b2.WithOwner()
                                        .HasForeignKey("ProfileMemberMetadataCosmeticsProfileMemberMetadataProfileMemberId");
                                });

                            b1.Navigation("Leaderboard");
                        });

                    b.Navigation("Cosmetics");

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.Entitlement", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ProductAccess", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");

                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Features.Monetization.Models.ShopOrder", "SourceOrder")
                        .WithMany()
                        .HasForeignKey("SourceOrderId");

                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "User")
                        .WithMany("ProductAccesses")
                        .HasForeignKey("UserId");

                    b.Navigation("Guild");

                    b.Navigation("Product");

                    b.Navigation("SourceOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ShopOrder", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "RecipientGuild")
                        .WithMany()
                        .HasForeignKey("RecipientGuildId");

                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.Navigation("Buyer");

                    b.Navigation("Recipient");

                    b.Navigation("RecipientGuild");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ShopOrderItem", b =>
                {
                    b.HasOne("EliteAPI.Features.Monetization.Models.ShopOrder", "ShopOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShopOrder");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Auctions.Models.AuctionItem", b =>
                {
                    b.HasOne("EliteAPI.Features.Resources.Items.Models.SkyblockItem", null)
                        .WithMany("AuctionItems")
                        .HasForeignKey("SkyblockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Bazaar.BazaarProductSummary", b =>
                {
                    b.HasOne("EliteAPI.Features.Resources.Items.Models.SkyblockItem", "SkyblockItem")
                        .WithOne("BazaarProductSummary")
                        .HasForeignKey("EliteAPI.Features.Resources.Bazaar.BazaarProductSummary", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkyblockItem");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.Guild", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId");

                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Banner");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildChannel", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildMember", b =>
                {
                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", "Account")
                        .WithMany("GuildMemberships")
                        .HasForeignKey("AccountId");

                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildRole", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.Event", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId");

                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventMember", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany("EventEntries")
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Events.EventTeam", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ProfileMember");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventTeam", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Events.Event", "Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Farming.Farming", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("Farming")
                        .HasForeignKey("EliteAPI.Models.Entities.Farming.Farming", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Farming.Pests", "Pests", b1 =>
                        {
                            b1.Property<int>("FarmingId")
                                .HasColumnType("integer");

                            b1.Property<int>("Beetle")
                                .HasColumnType("integer");

                            b1.Property<int>("Cricket")
                                .HasColumnType("integer");

                            b1.Property<int>("Earthworm")
                                .HasColumnType("integer");

                            b1.Property<int>("Fly")
                                .HasColumnType("integer");

                            b1.Property<int>("Locust")
                                .HasColumnType("integer");

                            b1.Property<int>("Mite")
                                .HasColumnType("integer");

                            b1.Property<int>("Mosquito")
                                .HasColumnType("integer");

                            b1.Property<int>("Moth")
                                .HasColumnType("integer");

                            b1.Property<int>("Mouse")
                                .HasColumnType("integer");

                            b1.Property<int>("Rat")
                                .HasColumnType("integer");

                            b1.Property<int>("Slug")
                                .HasColumnType("integer");

                            b1.HasKey("FarmingId");

                            b1.ToTable("FarmingWeights");

                            b1.WithOwner()
                                .HasForeignKey("FarmingId");
                        });

                    b.Navigation("Pests")
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("ChocolateFactory")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ChocolateFactoryRabbits", "TotalRabbits", b1 =>
                        {
                            b1.Property<int>("ChocolateFactoryId")
                                .HasColumnType("integer");

                            b1.Property<int>("Common")
                                .HasColumnType("integer");

                            b1.Property<int>("Divine")
                                .HasColumnType("integer");

                            b1.Property<int>("Epic")
                                .HasColumnType("integer");

                            b1.Property<int>("Legendary")
                                .HasColumnType("integer");

                            b1.Property<int>("Mythic")
                                .HasColumnType("integer");

                            b1.Property<int>("Rare")
                                .HasColumnType("integer");

                            b1.Property<int>("Uncommon")
                                .HasColumnType("integer");

                            b1.HasKey("ChocolateFactoryId");

                            b1.ToTable("ChocolateFactories");

                            b1.WithOwner()
                                .HasForeignKey("ChocolateFactoryId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ChocolateFactoryRabbits", "UniqueRabbits", b1 =>
                        {
                            b1.Property<int>("ChocolateFactoryId")
                                .HasColumnType("integer");

                            b1.Property<int>("Common")
                                .HasColumnType("integer");

                            b1.Property<int>("Divine")
                                .HasColumnType("integer");

                            b1.Property<int>("Epic")
                                .HasColumnType("integer");

                            b1.Property<int>("Legendary")
                                .HasColumnType("integer");

                            b1.Property<int>("Mythic")
                                .HasColumnType("integer");

                            b1.Property<int>("Rare")
                                .HasColumnType("integer");

                            b1.Property<int>("Uncommon")
                                .HasColumnType("integer");

                            b1.HasKey("ChocolateFactoryId");

                            b1.ToTable("ChocolateFactories");

                            b1.WithOwner()
                                .HasForeignKey("ChocolateFactoryId");
                        });

                    b.Navigation("ProfileMember");

                    b.Navigation("TotalRabbits")
                        .IsRequired();

                    b.Navigation("UniqueRabbits")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ContestParticipation", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.JacobContest", "JacobContest")
                        .WithMany()
                        .HasForeignKey("JacobContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.JacobData", null)
                        .WithMany("Contests")
                        .HasForeignKey("JacobDataId");

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JacobContest");

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Garden", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.Profile", "Profile")
                        .WithOne("Garden")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.Garden", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.CropUpgrades", "Upgrades", b1 =>
                        {
                            b1.Property<string>("GardenProfileId")
                                .HasColumnType("character varying(36)");

                            b1.Property<short>("Cactus")
                                .HasColumnType("smallint");

                            b1.Property<short>("Carrot")
                                .HasColumnType("smallint");

                            b1.Property<short>("CocoaBeans")
                                .HasColumnType("smallint");

                            b1.Property<short>("Melon")
                                .HasColumnType("smallint");

                            b1.Property<short>("Mushroom")
                                .HasColumnType("smallint");

                            b1.Property<short>("NetherWart")
                                .HasColumnType("smallint");

                            b1.Property<short>("Potato")
                                .HasColumnType("smallint");

                            b1.Property<short>("Pumpkin")
                                .HasColumnType("smallint");

                            b1.Property<short>("SugarCane")
                                .HasColumnType("smallint");

                            b1.Property<short>("Wheat")
                                .HasColumnType("smallint");

                            b1.HasKey("GardenProfileId");

                            b1.ToTable("Gardens");

                            b1.WithOwner()
                                .HasForeignKey("GardenProfileId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.MilestoneCrops", "Crops", b1 =>
                        {
                            b1.Property<string>("GardenProfileId")
                                .HasColumnType("character varying(36)");

                            b1.Property<long>("Cactus")
                                .HasColumnType("bigint");

                            b1.Property<long>("Carrot")
                                .HasColumnType("bigint");

                            b1.Property<long>("CocoaBeans")
                                .HasColumnType("bigint");

                            b1.Property<long>("Melon")
                                .HasColumnType("bigint");

                            b1.Property<long>("Mushroom")
                                .HasColumnType("bigint");

                            b1.Property<long>("NetherWart")
                                .HasColumnType("bigint");

                            b1.Property<long>("Potato")
                                .HasColumnType("bigint");

                            b1.Property<long>("Pumpkin")
                                .HasColumnType("bigint");

                            b1.Property<long>("SugarCane")
                                .HasColumnType("bigint");

                            b1.Property<long>("Wheat")
                                .HasColumnType("bigint");

                            b1.HasKey("GardenProfileId");

                            b1.ToTable("Gardens");

                            b1.WithOwner()
                                .HasForeignKey("GardenProfileId");
                        });

                    b.Navigation("Crops")
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Upgrades")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("JacobData")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.JacobData", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.EarnedMedalInventory", "EarnedMedals", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("Bronze")
                                .HasColumnType("integer");

                            b1.Property<int>("Diamond")
                                .HasColumnType("integer");

                            b1.Property<int>("Gold")
                                .HasColumnType("integer");

                            b1.Property<int>("Platinum")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.JacobPerks", "Perks", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("DoubleDrops")
                                .HasColumnType("integer");

                            b1.Property<int>("LevelCap")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.MedalInventory", "Medals", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("Bronze")
                                .HasColumnType("integer");

                            b1.Property<int>("Gold")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.Navigation("EarnedMedals")
                        .IsRequired();

                    b.Navigation("Medals")
                        .IsRequired();

                    b.Navigation("Perks")
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.PlayerData", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.MinecraftAccount", "MinecraftAccount")
                        .WithOne("PlayerData")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.PlayerData", "Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.SocialMediaLinks", "SocialMedia", b1 =>
                        {
                            b1.Property<int>("PlayerDataId")
                                .HasColumnType("integer");

                            b1.Property<string>("Discord")
                                .HasColumnType("text");

                            b1.Property<string>("Hypixel")
                                .HasColumnType("text");

                            b1.Property<string>("Youtube")
                                .HasColumnType("text");

                            b1.HasKey("PlayerDataId");

                            b1.ToTable("PlayerData");

                            b1.WithOwner()
                                .HasForeignKey("PlayerDataId");
                        });

                    b.Navigation("MinecraftAccount");

                    b.Navigation("SocialMedia")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.MinecraftAccount", "MinecraftAccount")
                        .WithMany()
                        .HasForeignKey("PlayerUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.Profile", "Profile")
                        .WithMany("Members")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ApiAccess", "Api", b1 =>
                        {
                            b1.Property<Guid>("ProfileMemberId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Collections")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Inventories")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Museum")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Skills")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Vault")
                                .HasColumnType("boolean");

                            b1.HasKey("ProfileMemberId");

                            b1.ToTable("ProfileMembers");

                            b1.WithOwner()
                                .HasForeignKey("ProfileMemberId");
                        });

                    b.Navigation("Api")
                        .IsRequired();

                    b.Navigation("MinecraftAccount");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Skills", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("Skills")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.Skills", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.CosmeticImage", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.WeightStyle", "Cosmetic")
                        .WithMany()
                        .HasForeignKey("CosmeticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cosmetic");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Product", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductCategory", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductImage", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductTag", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Monetization.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.ProductWeightStyle", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Monetization.Product", null)
                        .WithMany("ProductWeightStyles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Monetization.WeightStyle", null)
                        .WithMany("ProductWeightStyles")
                        .HasForeignKey("WeightStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.WeightStyle", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Images.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.CropCollection", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.SkillExperience", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EliteAPI.Features.Auth.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.GuildEntitlement", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany("Entitlements")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.UserEntitlement", b =>
                {
                    b.HasOne("EliteAPI.Features.Account.Models.EliteAccount", "Account")
                        .WithMany("Entitlements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.EliteAccount", b =>
                {
                    b.Navigation("DismissedAnnouncements");

                    b.Navigation("Entitlements");

                    b.Navigation("MinecraftAccounts");

                    b.Navigation("ProductAccesses");
                });

            modelBuilder.Entity("EliteAPI.Features.Account.Models.MinecraftAccount", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("EliteAPI.Features.Auth.Models.ApiUser", b =>
                {
                    b.Navigation("GuildMemberships");
                });

            modelBuilder.Entity("EliteAPI.Features.Monetization.Models.ShopOrder", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EliteAPI.Features.Resources.Items.Models.SkyblockItem", b =>
                {
                    b.Navigation("AuctionItems");

                    b.Navigation("BazaarProductSummary");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Entitlements");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.Event", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventTeam", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Profile", b =>
                {
                    b.Navigation("Garden");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.Navigation("ChocolateFactory")
                        .IsRequired();

                    b.Navigation("EventEntries");

                    b.Navigation("Farming")
                        .IsRequired();

                    b.Navigation("JacobData")
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Skills")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductWeightStyles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Monetization.WeightStyle", b =>
                {
                    b.Navigation("ProductWeightStyles");
                });
#pragma warning restore 612, 618
        }
    }
}
