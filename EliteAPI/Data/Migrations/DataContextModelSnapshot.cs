// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using EliteAPI.Data;
using EliteAPI.Models.Entities.Accounts;
using EliteAPI.Models.Entities.Discord;
using EliteAPI.Models.Entities.Events;
using EliteAPI.Models.Entities.Farming;
using EliteAPI.Models.Entities.Hypixel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EliteAPI.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DiscordAccessToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("DiscordAccessTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordRefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("DiscordRefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("GuildsLastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("TieToAccount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.EliteAccount", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<EliteInventory>("Inventory")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.Property<List<Purchase>>("Purchases")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<Redemption>>("Redemptions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<EliteSettings>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.MinecraftAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AccountId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<List<FlagReason>>("FlagReasons")
                        .HasColumnType("jsonb");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive");

                    b.Property<long>("PlayerDataLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfilesLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<List<MinecraftAccountProperty>>("Properties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "Name" }, "idx_minecraft_accounts_name");

                    b.ToTable("MinecraftAccounts");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("integer");

                    b.Property<string>("MinecraftAccountId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("MinecraftAccountId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.Guild", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("AdminRole")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Banner")
                        .HasColumnType("text");

                    b.Property<decimal>("BotPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<List<string>>("DiscordFeatures")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<GuildFeatures>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("HasBot")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("InviteCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("BotPermissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildChannels");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Permissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal[]>("Roles")
                        .IsRequired()
                        .HasColumnType("numeric(20,0)[]");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<decimal>("Permissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildRoles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.Event", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Banner")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("BlockedRole")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("DynamicStartTime")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("JoinUntilTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PrizeInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("RequiredRole")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Rules")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Events");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EventId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ProfileMemberId");

                    b.HasIndex("UserId");

                    b.ToTable("EventMembers");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Farming.Farming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Dictionary<string, double>>("BonusWeight")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, double>>("CropWeight")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<FarmingFortune>("Fortune")
                        .HasColumnType("jsonb");

                    b.Property<FarmingInventory>("Inventory")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("double precision");

                    b.Property<Dictionary<Crop, long>>("UncountedCrops")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("FarmingWeights");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Chocolate")
                        .HasColumnType("bigint");

                    b.Property<long>("ChocolateSincePrestige")
                        .HasColumnType("bigint");

                    b.Property<long>("ChocolateSpent")
                        .HasColumnType("bigint");

                    b.Property<long>("LastViewedChocolateFactory")
                        .HasColumnType("bigint");

                    b.Property<int>("Prestige")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<long>("TotalChocolate")
                        .HasColumnType("bigint");

                    b.Property<bool>("UnlockedZorro")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("ChocolateFactories");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ContestParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Collected")
                        .HasColumnType("integer");

                    b.Property<long>("JacobContestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("JacobDataId")
                        .HasColumnType("integer");

                    b.Property<int>("MedalEarned")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JacobContestId");

                    b.HasIndex("JacobDataId");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("ContestParticipations");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobContest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Bronze")
                        .HasColumnType("integer");

                    b.Property<int>("Crop")
                        .HasColumnType("integer");

                    b.Property<int>("Diamond")
                        .HasColumnType("integer");

                    b.Property<bool>("Finnegan")
                        .HasColumnType("boolean");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int>("Participants")
                        .HasColumnType("integer");

                    b.Property<int>("Platinum")
                        .HasColumnType("integer");

                    b.Property<int>("Silver")
                        .HasColumnType("integer");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("JacobContests");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ContestsLastUpdated")
                        .HasColumnType("bigint");

                    b.Property<int>("FirstPlaceScores")
                        .HasColumnType("integer");

                    b.Property<int>("Participations")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<JacobStats>("Stats")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("JacobData");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<long>("FirstLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("Karma")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogout")
                        .HasColumnType("bigint");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("MonthlyPackageRank")
                        .HasColumnType("text");

                    b.Property<string>("MonthlyRankColor")
                        .HasColumnType("text");

                    b.Property<string>("MostRecentMonthlyPackageRank")
                        .HasColumnType("text");

                    b.Property<double>("NetworkExp")
                        .HasColumnType("double precision");

                    b.Property<string>("NewPackageRank")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.Property<string>("RankPlusColor")
                        .HasColumnType("text");

                    b.Property<int>("RewardHighScore")
                        .HasColumnType("integer");

                    b.Property<int>("RewardScore")
                        .HasColumnType("integer");

                    b.Property<int>("RewardStreak")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDailyRewards")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRewards")
                        .HasColumnType("integer");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("PlayerData");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Profile", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<double>("BankBalance")
                        .HasColumnType("double precision");

                    b.Property<Dictionary<string, int>>("CraftedMinions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("GameMode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, int>>("CollectionTiers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("Collections")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<List<Pet>>("Pets")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PlayerUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileName")
                        .HasColumnType("text");

                    b.Property<double>("Purse")
                        .HasColumnType("double precision");

                    b.Property<int>("SkyblockXp")
                        .HasColumnType("integer");

                    b.Property<UnparsedApiData>("Unparsed")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("WasRemoved")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerUuid");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMembers");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Alchemy")
                        .HasColumnType("double precision");

                    b.Property<double>("Carpentry")
                        .HasColumnType("double precision");

                    b.Property<double>("Combat")
                        .HasColumnType("double precision");

                    b.Property<double>("Enchanting")
                        .HasColumnType("double precision");

                    b.Property<double>("Farming")
                        .HasColumnType("double precision");

                    b.Property<double>("Fishing")
                        .HasColumnType("double precision");

                    b.Property<double>("Foraging")
                        .HasColumnType("double precision");

                    b.Property<double>("Mining")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Runecrafting")
                        .HasColumnType("double precision");

                    b.Property<double>("Social")
                        .HasColumnType("double precision");

                    b.Property<double>("Taming")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProfileMemberId")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.CropCollection", b =>
                {
                    b.Property<long>("Cactus")
                        .HasColumnType("bigint");

                    b.Property<long>("Carrot")
                        .HasColumnType("bigint");

                    b.Property<long>("CocoaBeans")
                        .HasColumnType("bigint");

                    b.Property<long>("Melon")
                        .HasColumnType("bigint");

                    b.Property<long>("Mushroom")
                        .HasColumnType("bigint");

                    b.Property<long>("NetherWart")
                        .HasColumnType("bigint");

                    b.Property<long>("Potato")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<long>("Pumpkin")
                        .HasColumnType("bigint");

                    b.Property<long>("Seeds")
                        .HasColumnType("bigint");

                    b.Property<long>("SugarCane")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Wheat")
                        .HasColumnType("bigint");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("CropCollections");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.SkillExperience", b =>
                {
                    b.Property<double>("Alchemy")
                        .HasColumnType("double precision");

                    b.Property<double>("Carpentry")
                        .HasColumnType("double precision");

                    b.Property<double>("Combat")
                        .HasColumnType("double precision");

                    b.Property<double>("Enchanting")
                        .HasColumnType("double precision");

                    b.Property<double>("Farming")
                        .HasColumnType("double precision");

                    b.Property<double>("Fishing")
                        .HasColumnType("double precision");

                    b.Property<double>("Foraging")
                        .HasColumnType("double precision");

                    b.Property<double>("Mining")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProfileMemberId")
                        .HasColumnType("uuid");

                    b.Property<double>("Runecrafting")
                        .HasColumnType("double precision");

                    b.Property<double>("Social")
                        .HasColumnType("double precision");

                    b.Property<double>("Taming")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ProfileMemberId");

                    b.ToTable("SkillExperiences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8270a1b1-5809-436a-ba1c-b712f4f55f67",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3384aba1-5453-4787-81d9-0b7222225d81",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "d8c803c1-63a0-4594-8d68-aad7bd59df7d",
                            Name = "Support",
                            NormalizedName = "SUPPORT"
                        },
                        new
                        {
                            Id = "ff4f5319-644e-4332-8bd5-2ec989ba5e7f",
                            Name = "Wiki",
                            NormalizedName = "WIKI"
                        },
                        new
                        {
                            Id = "e99efab5-3fd2-416e-b8f5-93b0370892ac",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.MedalEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<MedalEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.WeightEvent", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.Event");

                    b.Property<WeightEventData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.MedalEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<MedalEventMemberData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.WeightEventMember", b =>
                {
                    b.HasBaseType("EliteAPI.Models.Entities.Events.EventMember");

                    b.Property<EventMemberWeightData>("Data")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.ApiUser", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.EliteAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.MinecraftAccount", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.EliteAccount", "EliteAccount")
                        .WithMany("MinecraftAccounts")
                        .HasForeignKey("AccountId");

                    b.Navigation("EliteAccount");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.UserBadge", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Accounts.MinecraftAccount", "MinecraftAccount")
                        .WithMany("Badges")
                        .HasForeignKey("MinecraftAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("MinecraftAccount");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildChannel", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildMember", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.ApiUser", "Account")
                        .WithMany("GuildMemberships")
                        .HasForeignKey("AccountId");

                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.GuildRole", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.Event", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Discord.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Events.EventMember", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany("EventEntries")
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Accounts.EliteAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ProfileMember");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Farming.Farming", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("Farming")
                        .HasForeignKey("EliteAPI.Models.Entities.Farming.Farming", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Farming.Pests", "Pests", b1 =>
                        {
                            b1.Property<int>("FarmingId")
                                .HasColumnType("integer");

                            b1.Property<int>("Beetle")
                                .HasColumnType("integer");

                            b1.Property<int>("Cricket")
                                .HasColumnType("integer");

                            b1.Property<int>("Earthworm")
                                .HasColumnType("integer");

                            b1.Property<int>("Fly")
                                .HasColumnType("integer");

                            b1.Property<int>("Locust")
                                .HasColumnType("integer");

                            b1.Property<int>("Mite")
                                .HasColumnType("integer");

                            b1.Property<int>("Mosquito")
                                .HasColumnType("integer");

                            b1.Property<int>("Moth")
                                .HasColumnType("integer");

                            b1.Property<int>("Rat")
                                .HasColumnType("integer");

                            b1.Property<int>("Slug")
                                .HasColumnType("integer");

                            b1.HasKey("FarmingId");

                            b1.ToTable("FarmingWeights");

                            b1.WithOwner()
                                .HasForeignKey("FarmingId");
                        });

                    b.Navigation("Pests")
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("ChocolateFactory")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.ChocolateFactory", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ChocolateFactoryRabbits", "TotalRabbits", b1 =>
                        {
                            b1.Property<int>("ChocolateFactoryId")
                                .HasColumnType("integer");

                            b1.Property<int>("Common")
                                .HasColumnType("integer");

                            b1.Property<int>("Divine")
                                .HasColumnType("integer");

                            b1.Property<int>("Epic")
                                .HasColumnType("integer");

                            b1.Property<int>("Legendary")
                                .HasColumnType("integer");

                            b1.Property<int>("Mythic")
                                .HasColumnType("integer");

                            b1.Property<int>("Rare")
                                .HasColumnType("integer");

                            b1.Property<int>("Uncommon")
                                .HasColumnType("integer");

                            b1.HasKey("ChocolateFactoryId");

                            b1.ToTable("ChocolateFactories");

                            b1.WithOwner()
                                .HasForeignKey("ChocolateFactoryId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ChocolateFactoryRabbits", "UniqueRabbits", b1 =>
                        {
                            b1.Property<int>("ChocolateFactoryId")
                                .HasColumnType("integer");

                            b1.Property<int>("Common")
                                .HasColumnType("integer");

                            b1.Property<int>("Divine")
                                .HasColumnType("integer");

                            b1.Property<int>("Epic")
                                .HasColumnType("integer");

                            b1.Property<int>("Legendary")
                                .HasColumnType("integer");

                            b1.Property<int>("Mythic")
                                .HasColumnType("integer");

                            b1.Property<int>("Rare")
                                .HasColumnType("integer");

                            b1.Property<int>("Uncommon")
                                .HasColumnType("integer");

                            b1.HasKey("ChocolateFactoryId");

                            b1.ToTable("ChocolateFactories");

                            b1.WithOwner()
                                .HasForeignKey("ChocolateFactoryId");
                        });

                    b.Navigation("ProfileMember");

                    b.Navigation("TotalRabbits")
                        .IsRequired();

                    b.Navigation("UniqueRabbits")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ContestParticipation", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.JacobContest", "JacobContest")
                        .WithMany()
                        .HasForeignKey("JacobContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.JacobData", null)
                        .WithMany("Contests")
                        .HasForeignKey("JacobDataId");

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JacobContest");

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("JacobData")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.JacobData", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.EarnedMedalInventory", "EarnedMedals", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("Bronze")
                                .HasColumnType("integer");

                            b1.Property<int>("Diamond")
                                .HasColumnType("integer");

                            b1.Property<int>("Gold")
                                .HasColumnType("integer");

                            b1.Property<int>("Platinum")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.JacobPerks", "Perks", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("DoubleDrops")
                                .HasColumnType("integer");

                            b1.Property<int>("LevelCap")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.MedalInventory", "Medals", b1 =>
                        {
                            b1.Property<int>("JacobDataId")
                                .HasColumnType("integer");

                            b1.Property<int>("Bronze")
                                .HasColumnType("integer");

                            b1.Property<int>("Gold")
                                .HasColumnType("integer");

                            b1.Property<int>("Silver")
                                .HasColumnType("integer");

                            b1.HasKey("JacobDataId");

                            b1.ToTable("JacobData");

                            b1.WithOwner()
                                .HasForeignKey("JacobDataId");
                        });

                    b.Navigation("EarnedMedals")
                        .IsRequired();

                    b.Navigation("Medals")
                        .IsRequired();

                    b.Navigation("Perks")
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.PlayerData", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.MinecraftAccount", "MinecraftAccount")
                        .WithOne("PlayerData")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.PlayerData", "Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.SocialMediaLinks", "SocialMedia", b1 =>
                        {
                            b1.Property<int>("PlayerDataId")
                                .HasColumnType("integer");

                            b1.Property<string>("Discord")
                                .HasColumnType("text");

                            b1.Property<string>("Hypixel")
                                .HasColumnType("text");

                            b1.Property<string>("Youtube")
                                .HasColumnType("text");

                            b1.HasKey("PlayerDataId");

                            b1.ToTable("PlayerData");

                            b1.WithOwner()
                                .HasForeignKey("PlayerDataId");
                        });

                    b.Navigation("MinecraftAccount");

                    b.Navigation("SocialMedia")
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.MinecraftAccount", "MinecraftAccount")
                        .WithMany()
                        .HasForeignKey("PlayerUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Hypixel.Profile", "Profile")
                        .WithMany("Members")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EliteAPI.Models.Entities.Hypixel.ApiAccess", "Api", b1 =>
                        {
                            b1.Property<Guid>("ProfileMemberId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Collections")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Inventories")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Museum")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Skills")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Vault")
                                .HasColumnType("boolean");

                            b1.HasKey("ProfileMemberId");

                            b1.ToTable("ProfileMembers");

                            b1.WithOwner()
                                .HasForeignKey("ProfileMemberId");
                        });

                    b.Navigation("Api")
                        .IsRequired();

                    b.Navigation("MinecraftAccount");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Skills", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithOne("Skills")
                        .HasForeignKey("EliteAPI.Models.Entities.Hypixel.Skills", "ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.CropCollection", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Timescale.SkillExperience", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Hypixel.ProfileMember", "ProfileMember")
                        .WithMany()
                        .HasForeignKey("ProfileMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAPI.Models.Entities.Accounts.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EliteAPI.Models.Entities.Accounts.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.ApiUser", b =>
                {
                    b.Navigation("GuildMemberships");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.EliteAccount", b =>
                {
                    b.Navigation("MinecraftAccounts");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Accounts.MinecraftAccount", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("PlayerData");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Discord.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.JacobData", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.Profile", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("EliteAPI.Models.Entities.Hypixel.ProfileMember", b =>
                {
                    b.Navigation("ChocolateFactory")
                        .IsRequired();

                    b.Navigation("EventEntries");

                    b.Navigation("Farming")
                        .IsRequired();

                    b.Navigation("JacobData")
                        .IsRequired();

                    b.Navigation("Skills")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
